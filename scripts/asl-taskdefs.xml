<?xml version="1.0" encoding="UTF-8"?>
<project name="asl-taskdefs">
    <description>
        This file provide some common taskdefs.
    </description>

    <dirname property="asl.basedir" file="${ant.file.asl-taskdefs}" />
    <import file="${asl.basedir}/asl-properties.xml" />
    <!--
        ant-contrib taskdefs.
      -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib.jar}" />
        </classpath>
    </taskdef>

    <!-- saxon taskdefs. -->
    <path id="ci.saxon.ant.jars">
        <fileset dir="${saxon.root}" includes="**/*.jar" />
    </path>
    <taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform" classpathref="ci.saxon.ant.jars" />

    <!-- doc: http://www.oopsconsultancy.com/software/xmltask/ -->
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath path="${ci.asl.lib.root}/xmltask.jar" />
    </taskdef>

    <!-- groovy taskdef
    参考：http://groovy.codehaus.org/The+groovy+Ant+Task
    -->
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy">
        <classpath>
            <pathelement location="${groovy.jar}" />
        </classpath>
    </taskdef>

    <macrodef name="groovy-cli">
        <element name="args" />
        <sequential>
            <java jar="${groovy.jar}" fork="true" failonerror="true">
                <args />
            </java>
        </sequential>
    </macrodef>

    <macrodef name="getGitCommitId">
        <attribute name="repoDir" />
        <attribute name="commitId" default="git.commit.id"/>
        <attribute name="shortCommitId" default="git.short.commit.id"/>
        <sequential>
            <exec executable="git" outputproperty="@{commitId}" failonerror="true" dir="@{repoDir}">
                <arg value="rev-parse" />
                <arg value="HEAD" />
            </exec>
            <exec executable="git" outputproperty="@{shortCommitId}" failonerror="true" dir="@{repoDir}">
                <arg value="rev-parse" />
                <arg value="--short" />
                <arg value="HEAD" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="getGitBranch">
        <attribute name="repoDir" />
        <attribute name="branchName" default="git.branch.name"/>
        <sequential>
            <exec executable="git" outputproperty="@{branchName}" failonerror="true" dir="@{repoDir}">
                <arg value="rev-parse" />
                <arg value="--abbrev-ref" />
                <arg value="HEAD" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="getVersionFromFile">
      <attribute name="versionFile" default="VERSION"/>
      <attribute name="versionProperty" default="VERSION" />
      <sequential>
        <groovy>
          <arg value="@{versionFile}" />
          <arg value="@{versionProperty}" />
          def versionFile = args[0]
          def versionProperty = args[1]
          def version = new File(versionFile).text.trim()
          properties[versionProperty] = version
        </groovy>
      </sequential>
    </macrodef>

    <!--
     linux install subversion http://pkgs.repoforge.org/subversion/
     -->
    <!--获取SVN info命令的信息 -->
    <macrodef name="getSvnInfo">
        <attribute name="targetFile" />
        <attribute name="svnRevisionProperty" default="svn.revision" />
        <attribute name="svnUrlProperty" default="svn.url" />
        <sequential>
            <exec executable="svn" outputproperty="svn.info.log" failonerror="true">
                <arg value="info" />
                <arg value="@{targetFile}" />
            </exec>

            <groovy>
                <arg value="${svn.info.log}" />
                <arg value="@{svnRevisionProperty}" />
                <arg value="@{svnUrlProperty}" />

                def svnInfoOutLog = args[0]
                def svnRevisionProperty = args[1]
                def svnUrlProperty = args[2]

                // analyze svn info command out...
                def outLogLines = svnInfoOutLog.split('\n')
                def svnRevision = -1
                def svnUrl = ''

                outLogLines.each { line ->

                    def revisionMatcher = line =~ "^Last Changed Rev: (\\d+)"
                    def urlMatcher = line =~ "^URL: (.*)"

                    if (revisionMatcher.find()) {
                        svnRevision = revisionMatcher.group(1)
                    }

                    if (urlMatcher.find()) {
                        svnUrl = urlMatcher.group(1)
                    }
                }

                if (svnRevision != -1) {
                    properties[svnRevisionProperty] = svnRevision
                } else {
                    System.exit(-1)
                }

                if (svnUrl != '') {
                    properties[svnUrlProperty] = svnUrl
                } else {
                    System.exit(-1)
                }

            </groovy>
        </sequential>
    </macrodef>

    <!-- 导入文件或者目录到SVN里面 -->
    <macrodef name="svnImport">
        <attribute name="workingDir" default="${ws.dir}"/>
        <attribute name="targetFile" />
        <attribute name="targetSvnUrl" />
        <attribute name="svnCommitLog" />
        <sequential>
            <if>
                <not>
                    <available file="@{workingDir}/@{targetFile}" />
                </not>
                <then>
                    <fail message="-- // error: @{workingDir}/@{targetFile} is not exist." />
                </then>
            </if>

            <exec executable="svn" dir="@{workingDir}">
                <arg value="import" />
                <arg line="-m &quot;@{svnCommitLog}&quot;" />
                <arg value="@{targetFile}" />
                <arg value="@{targetSvnUrl}/@{targetFile}" />
            </exec>
        </sequential>
    </macrodef>

    <!-- 创建分支或者Tag -->
    <macrodef name="svnCopy">
        <attribute name="svnCommitLog" />
        <attribute name="svnOriginUrl" />
        <attribute name="svnTargetUrl" />
        <sequential>
            <echo message="svn-copy commit log: @{svnCommitLog}" />
            <echo message="svn origin url: @{svnOriginUrl}" />
            <echo message="svn target url: @{svnTargetUrl}" />
            <exec executable="svn">
                <arg value="copy" />
                <arg value="@{svnOriginUrl}" />
                <arg value="@{svnTargetUrl}" />
                <arg line="-m &quot;@{svnCommitLog}&quot;" />
            </exec>
        </sequential>
    </macrodef>

    <!-- 修改分支或者Tag名称 -->
    <macrodef name="svnMove">
        <attribute name="svnCommitLog" />
        <attribute name="svnOriginUrl" />
        <attribute name="svnTargetUrl" />
        <sequential>
            <echo message="svn-move commit log: @{svnCommitLog}" />
            <echo message="svn origin url: @{svnOriginUrl}" />
            <echo message="svn target url: @{svnTargetUrl}" />
            <exec executable="svn" failonerror="true">
                <arg value="move" />
                <arg value="@{svnOriginUrl}" />
                <arg value="@{svnTargetUrl}" />
                <arg line="-m &quot;@{svnCommitLog}&quot;" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="svnDelete">
        <attribute name="svnCommitLog" />
        <attribute name="svnTargetUrl" />
        <attribute name="failonerror" default="true" />
        <sequential>
            <echo message="svn-delete commit log: @{svnCommitLog}" />
            <echo message="svn target url: @{svnTargetUrl}" />
            <exec executable="svn" failonerror="@{failonerror}">
                <arg value="delete" />
                <arg value="@{svnTargetUrl}" />
                <arg line="-m &quot;@{svnCommitLog}&quot;" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="getFilenameInfo">
        <attribute name="targetFile" />
        <attribute name="fileNameProperty" default="target.file.name" />
        <attribute name="fileExtProperty" default="target.file.ext" />
        <sequential>
            <basename property="##target.file.basename##" file="@{targetFile}"/>

            <propertyregex property="@{fileNameProperty}"
                           input="${##target.file.basename##}" regexp="(.*)\.[a-z]+$" select="\1" />
            <propertyregex property="@{fileExtProperty}"
                           input="${##target.file.basename##}" regexp=".*\.([a-z]+)$" select="\1" />

        </sequential>
    </macrodef>

    <macrodef name="ci">
        <attribute name="task" />
        <element name="properties" optional="true" />
        <sequential>
            <ant antfile="${ci.asl.tasks.root}/@{task}/run.xml" inheritRefs="true">
                <properties />
            </ant>
        </sequential>
    </macrodef>

    <macrodef name="stage">
      <attribute name="name" />
      <element name="tasks" />
      <sequential>
        <echo message="--// stage: @{name}" />
        <tasks />
      </sequential>
    </macrodef>

     <macrodef name="over">
        <attribute name="message" default="" />
        <sequential>
            <echo message="@{message}" />
            <script language="javascript">
                self.log("Run Over!")
                java.lang.System.exit(0)
            </script>
        </sequential>
    </macrodef>

    <target name="asl.taskdefs.unix" depends="asl.properties.unix" if="os.unix">
        <!-- unix tasks defines -->
    </target>

    <target name="asl.taskdefs.windows" depends="asl.properties.windows" if="os.windows">
        <!-- windows tasks defines -->
        <macrodef name="robocopy">
            <attribute name="workdingdir" default="${robocopy.root}"/>
            <attribute name="failonerror" default="false" />
            <attribute name="append" default="false" />
            <attribute name="dir" />
            <attribute name="todir" />
            <sequential>
                <exec executable="cmd" dir="@{workdingdir}" failonerror="@{failonerror}">
                    <arg value="/c" />
                    <arg value="${robocopy.root}/Robocopy.exe" />
                    <arg value="@{dir}" />
                    <arg value="@{todir}" />
                    <arg value="/MIR" />
                </exec>
            </sequential>
        </macrodef>
    </target>

    <target name="asl.taskdefs" depends="asl.taskdefs.unix,asl.taskdefs.windows" />

</project>
